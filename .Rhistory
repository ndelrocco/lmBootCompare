for(i in burnin:(B-1)){
num <- num + (pDraws[i] - xbar)*(pDraws[i+1] - xbar)
denom <- denom + (pDraws[i] - xbar)^2
}
Rx1 <- num/denom
sx <- (1+Rx1)/(1-Rx1)
#Effective sample size:
900/sx
#Check:
coda::effectiveSize(pDraws[burnin:B])
B <- 1000
u <- runif(B)
acc.count <- 0
std <- .2 ## Spread of proposal distribution
x0 <- 5
x0 <- 5
pP <- 0.5
set.seed(32611)
for (i in 2:B){
xC <- rbinom(1, 10, p.acc[i-1]) #draw current x
pC <- rnorm(1, mean=pP, sd=std) ## pP previous sample; pC: current sample
alpha <- min(1, (
(dbeta(pC, xC + a, b + n - xC) /dnorm(pC, mean=pP, sd=std)) /
(dbeta(pP, xC + a, b + n - xC) / dnorm(pP, mean=pC, sd=std))
)
)
p.acc[i] <- pP <- ifelse(u[i] < alpha, pC, pP)
## count acccepted draws:
acc.count <- acc.count + (u[i] < alpha)
}
p.acc <- rep.int(NA, B)
for (i in 2:B){
xC <- rbinom(1, 10, p.acc[i-1]) #draw current x
pC <- rnorm(1, mean=pP, sd=std) ## pP previous sample; pC: current sample
alpha <- min(1, (
(dbeta(pC, xC + a, b + n - xC) /dnorm(pC, mean=pP, sd=std)) /
(dbeta(pP, xC + a, b + n - xC) / dnorm(pP, mean=pC, sd=std))
)
)
p.acc[i] <- pP <- ifelse(u[i] < alpha, pC, pP)
## count acccepted draws:
acc.count <- acc.count + (u[i] < alpha)
}
acf(pDraws[burnin:B], main = "Auto-Correlation Function for Theta from Gibbs Sampling")
B <- 1000
p.acc <- rep.int(NA, B)
u <- runif(B)
acc.count <- 0
std <- .2 ## Spread of proposal distribution
p.acc[1] <- 0.5
x0 <- 5
pP <- 0.5
set.seed(32611)
i <- 2
xC <- rbinom(1, 10, p.acc[i-1]) #draw current x
xC
pC <- rnorm(1, mean=pP, sd=std) ## pP previous sample; pC: current sample
pC
alpha <- min(1, (
(dbeta(pC, xC + a, b + n - xC) /dnorm(pC, mean=pP, sd=std)) /
(dbeta(pP, xC + a, b + n - xC) / dnorm(pP, mean=pC, sd=std))
)
)
alpha
p.acc[i] <- pP <- ifelse(u[i] < alpha, pC, pP)
## count acccepted draws:
acc.count <- acc.count + (u[i] < alpha)
xC <- rbinom(1, 10, p.acc[i-1]) #draw current x
xC
i <- 3
xC <- rbinom(1, 10, p.acc[i-1]) #draw current x
xC
pC <- rnorm(1, mean=pP, sd=std) ## pP previous sample; pC: current sample
pC
negCount <- 0
B <- 1000
p.acc <- rep.int(NA, B)
u <- runif(B)
acc.count <- 0
std <- .2 ## Spread of proposal distribution
p.acc[1] <- 0.5
x0 <- 5
pP <- 0.5
negCount <- 0
set.seed(32611)
for (i in 2:B){
xC <- rbinom(1, 10, p.acc[i-1]) #draw current x
pC <- rnorm(1, mean=pP, sd=std) ## pP previous sample; pC: current sample
if(pC < 0){
negCount <- negCount + 1
pC <- pP
}
alpha <- min(1, (
(dbeta(pC, xC + a, b + n - xC) /dnorm(pC, mean=pP, sd=std)) /
(dbeta(pP, xC + a, b + n - xC) / dnorm(pP, mean=pC, sd=std))
)
)
p.acc[i] <- pP <- ifelse(u[i] < alpha, pC, pP)
## count acccepted draws:
acc.count <- acc.count + (u[i] < alpha)
}
dbeta(-1)
dbeta(-1, 2, 2)
dbeta(-1,1,1)
alpha <- rep.int(NA, B)
B <- 1000
p.acc <- rep.int(NA, B)
u <- runif(B)
acc.count <- 0
std <- .2 ## Spread of proposal distribution
p.acc[1] <- 0.5
x0 <- 5
pP <- 0.5
negCount <- 0
alpha <- rep.int(NA, B)
alphaSave <- rep.int(NA, B)
pCSave <- rep.int(NA, B)
set.seed(32611)
for (i in 2:B){
xC <- rbinom(1, 10, p.acc[i-1]) #draw current x
xCSave[i] <- xC
pC <- rnorm(1, mean=pP, sd=std) ## pP previous sample; pC: current sample
pCSave[i] <- pC
alpha <- min(1, (
(dbeta(pC, xC + a, b + n - xC) /dnorm(pC, mean=pP, sd=std)) /
(dbeta(pP, xC + a, b + n - xC) / dnorm(pP, mean=pC, sd=std))
)
)
alphaSave[i] <- alpha
p.acc[i] <- pP <- ifelse(u[i] < alpha, pC, pP)
## count acccepted draws:
acc.count <- acc.count + (u[i] < alpha)
}
xCSave <- rep.int(NA, B)
pCSave <- rep.int(NA, B)
set.seed(32611)
for (i in 2:B){
xC <- rbinom(1, 10, p.acc[i-1]) #draw current x
xCSave[i] <- xC
pC <- rnorm(1, mean=pP, sd=std) ## pP previous sample; pC: current sample
pCSave[i] <- pC
alpha <- min(1, (
(dbeta(pC, xC + a, b + n - xC) /dnorm(pC, mean=pP, sd=std)) /
(dbeta(pP, xC + a, b + n - xC) / dnorm(pP, mean=pC, sd=std))
)
)
alphaSave[i] <- alpha
p.acc[i] <- pP <- ifelse(u[i] < alpha, pC, pP)
## count acccepted draws:
acc.count <- acc.count + (u[i] < alpha)
}
a <- b <- 2
n <- 10
x0 <- 5
p0 <- 0.5
B <- 1000
pDraws <- numeric(B)
pDraws[1] <- p0
xDraws <- numeric(B)
xDraws[1] <- x0
set.seed(32611)
for(i in 2:B){
xDraws[i] <- rbinom(1, 10, pDraws[i-1])
pDraws[i] <- rbeta(1, xDraws[i] + a, b + n - xDraws[i])
}
ts.plot(pDraws, xlab = "Iterations", main = "Theta Chain from Gibbs Sampling", ylab = "")
B <- 1000
p.acc <- rep.int(NA, B)
u <- runif(B)
acc.count <- 0
std <- .2 ## Spread of proposal distribution
p.acc[1] <- 0.5
x0 <- 5
pP <- 0.5
alphaSave <- rep.int(NA, B)
xCSave <- rep.int(NA, B)
pCSave <- rep.int(NA, B)
set.seed(32611)
for (i in 2:B){
xC <- rbinom(1, 10, p.acc[i-1]) #draw current x
xCSave[i] <- xC
pC <- rnorm(1, mean=pP, sd=std) ## pP previous sample; pC: current sample
pCSave[i] <- pC
alpha <- min(1, (
(dbeta(pC, xC + a, b + n - xC) /dnorm(pC, mean=pP, sd=std)) /
(dbeta(pP, xC + a, b + n - xC) / dnorm(pP, mean=pC, sd=std))
)
)
alphaSave[i] <- alpha
p.acc[i] <- pP <- ifelse(u[i] < alpha, pC, pP)
## count acccepted draws:
acc.count <- acc.count + (u[i] < alpha)
}
which.na(alphaSave)
which(is.na(xC))
which(is.na(pC))
which(is.na(alpha))
which(is.na(xCSave))
which(is.na(pCSave))
which(is.na(alphaSave))
B <- 1000
p.acc <- rep.int(NA, B)
u <- runif(B)
acc.count <- 0
std <- .2 ## Spread of proposal distribution
p.acc[1] <- 0.5
x0 <- 5
pP <- 0.5
set.seed(32611)
for (i in 2:B){
xC <- rbinom(1, 10, p.acc[i-1]) #draw current x
pC <- rnorm(1, mean=pP, sd=std) ## pP previous sample; pC: current sample
alpha <- min(1, (
(dbeta(pC, xC + a, b + n - xC) /dnorm(pC, mean=pP, sd=std)) /
(dbeta(pP, xC + a, b + n - xC) / dnorm(pP, mean=pC, sd=std))
)
)
p.acc[i] <- pP <- ifelse(u[i] < alpha, pC, pP)
## count acccepted draws:
acc.count <- acc.count + (u[i] < alpha)
}
## Percentage of accepted draws:
(acc.count/B)*100
ts.plot(p.acc, xlab = "Iterations", main = "Theta Chain from Metropolis Hastings", ylab = "")
a <- b <- 2
n <- 10
B <- 1000
p.acc <- rep.int(NA, B)
u <- runif(B)
acc.count <- 0
std <- .2 ## Spread of proposal distribution
p.acc[1] <- 0.5
x0 <- 5
pP <- 0.5
alphaSave <- rep.int(NA, B)
xCSave <- rep.int(NA, B)
pCSave <- rep.int(NA, B)
set.seed(32611)
for (i in 2:B){
xC <- rbinom(1, 10, p.acc[i-1]) #draw current x
pC <- rnorm(1, mean=pP, sd=std) ## pP previous sample; pC: current sample
alpha <- min(1, (
(dbeta(pC, xC + a, b + n - xC) /dnorm(pC, mean=pP, sd=std)) /
(dbeta(pP, xC + a, b + n - xC) / dnorm(pP, mean=pC, sd=std))
)
)
p.acc[i] <- pP <- ifelse(u[i] < alpha, pC, pP)
## count acccepted draws:
acc.count <- acc.count + (u[i] < alpha)
}
ts.plot(p.acc, xlab = "Iterations", main = "Theta Chain from Metropolis Hastings", ylab = "")
## Percentage of accepted draws:
(acc.count/B)*100
a <- b <- 2
n <- 10
x0 <- 5
p0 <- 0.5
B <- 1000
pDraws <- numeric(B)
pDraws[1] <- p0
xDraws <- numeric(B)
xDraws[1] <- x0
set.seed(32611)
for(i in 2:B){
xDraws[i] <- rbinom(1, 10, pDraws[i-1])
pDraws[i] <- rbeta(1, xDraws[i] + a, b + n - xDraws[i])
}
ts.plot(pDraws, xlab = "Iterations", main = "Theta Chain from Gibbs Sampling", ylab = "")
burnin <- 101
hist(pDraws[burnin:B], prob = T, xlab = "Theta", main = "Draws of Theta from Gibbs Sampling")
median( pDraws[burnin:B] )
a <- b <- 2
n <- 10
B <- 1000
p.acc <- rep.int(NA, B)
acc.count <- 0
std <- .2 ## Spread of proposal distribution
p.acc[1] <- 0.5
x0 <- 5
pP <- 0.5
set.seed(32611)
u <- runif(B)
for (j in 2:B){
xC <- rbinom(1, 10, p.acc[j-1]) #draw current x
pC <- rnorm(1, mean=pP, sd=std) ## pP previous sample; pC: current sample
alpha <- min(1, (
(dbeta(pC, xC + a, b + n - xC) /dnorm(pC, mean=pP, sd=std)) /
(dbeta(pP, xC + a, b + n - xC) / dnorm(pP, mean=pC, sd=std))
)
)
p.acc[i] <- pP <- ifelse(u[j] < alpha, pC, pP)
## count acccepted draws:
acc.count <- acc.count + (u[j] < alpha)
}
a <- b <- 2
n <- 10
B <- 1000
p.acc <- rep.int(NA, B)
acc.count <- 0
std <- .2 ## Spread of proposal distribution
p.acc[1] <- 0.5
x0 <- 5
pP <- 0.5
set.seed(32611)
u <- runif(B)
for (j in 2:B){
xC <- rbinom(1, 10, p.acc[j-1]) #draw current x
pC <- rnorm(1, mean=pP, sd=std) ## pP previous sample; pC: current sample
alpha <- min(1, (
(dbeta(pC, xC + a, b + n - xC) /dnorm(pC, mean=pP, sd=std)) /
(dbeta(pP, xC + a, b + n - xC) / dnorm(pP, mean=pC, sd=std))
)
)
p.acc[j] <- pP <- ifelse(u[j] < alpha, pC, pP)
## count acccepted draws:
acc.count <- acc.count + (u[j] < alpha)
}
ts.plot(p.acc, xlab = "Iterations", main = "Theta Chain from Metropolis Hastings", ylab = "")
## Percentage of accepted draws:
(acc.count/B)*100
?sample
setwd("C:/Users/Natalie/Desktop/Fall 2019/PHC6068/Final Project/lmBootCompare")
## make the code neat
formatR::tidy_dir("R")
devtools::document()
devtools::check()
?confint
## make the code neat
formatR::tidy_dir("R")
devtools::document()
devtools::check()
?value
## make the code neat
formatR::tidy_dir("R")
devtools::document()
devtools::check()
setwd("C:/Users/Natalie/Desktop/Fall 2019/PHC6068/Final Project/lmBootCompare")
## make the code neat
formatR::tidy_dir("R")
devtools::document()
usethis::use_vignette("lmBootCompare")
devtools::check()
devtools::build()
install.packages("lmBootCompare")
install.packages("lmBootCompare")
install.packages("lmBootCompare_0.0.0.9000")
setwd("C:/Users/Natalie/Desktop/Fall 2019/PHC6068/Final Project/")
install.packages("lmBootCompare_0.0.0.9000")
setwd("C:/Users/Natalie/Desktop/Fall 2019/PHC6068/Final Project/lmBootCompare")
devtools::install()
install.packages(file.path("C:/Users/Natalie/Desktop/Fall 2019/PHC6068/Final Project","lmBootCompare_0.0.0.9000.tar.gz"),repos=NULL,type="source")
library(lmBootCompare)
library(faraway)
data("prostate")
lm1 <- lm(svi ~ age*gleason)
lm1 <- lm(svi ~ age*gleason, prostate)
?bootstrapSamples
summary(lm1)$formula
bootstrapSamples(lm1, "svi ~ age*gleason", prostate, 1000)
library(lmBootCompare)
bootstrapSamples(lm1, "svi ~ age*gleason", prostate, 1000)
lmBootCompare::bootstrapSamples(lm1, "svi ~ age*gleason", prostate, 1000)
lmBootCompare:::bootstrapSamples(lm1, "svi ~ age*gleason", prostate, 1000)
getAnywhere(lmBootCompare)
getAnywhere(bootstrapSamples)
boots <- lmBootCompare:::bootstrapSamples(lm1, "svi ~ age*gleason", prostate, 1000)
lmBootCompare:::bootstrapSummary(boots, lm1)
lmBootCompare:::bootstrapConfInt(lm1, boots, 0.95)
?coefficientPlots
lmBootCompare:::coefficientPlots(lm1, boots)
remove.packages("lmBootCompare")
setwd("C:/Users/Natalie/Desktop/Fall 2019/PHC6068/Final Project/lmBootCompare")
## make the code neat
formatR::tidy_dir("R")
devtools::document()
usethis::use_vignette("lmBootCompare")
devtools::check()
devtools::build()
install.packages(file.path("C:/Users/Natalie/Desktop/Fall 2019/PHC6068/Final Project","lmBootCompare_0.0.0.9000.tar.gz"),repos=NULL,type="source")
library(lmBootCompare)
library(faraway)
data("prostate")
lm1 <- lm(svi ~ age*gleason, prostate)
boots <- bootstrapSamples(lm1, "svi ~ age*gleason", prostate, 1000)
bootstrapSummary(boots, lm1)
bootstrapConfInt(lm1, boots, 0.95)
coefficientPlots(lm1, boots)
boots <- bootstrapSamples(lm1, "svi ~ age", prostate, 1000)
bootstrapSummary(boots, lm1)
lm1 <- lm(svi ~ age, prostate)
boots <- bootstrapSamples(lm1, "svi ~ age", prostate, 1000)
bootstrapSummary(boots, lm1)
bootstrapConfInt(lm1, boots, 0.95)
coefficientPlots(lm1, boots)
?sampler
?rMammen2
?rMammenC
?rRademacher
remove.packages("lmBootCompare")
usethis::use_vignette("lmBootCompare")
setwd("C:/Users/Natalie/Desktop/Fall 2019/PHC6068/Final Project/lmBootCompare")
## make the code neat
formatR::tidy_dir("R")
devtools::document()
devtools::check()
devtools::check()
## make the code neat
formatR::tidy_dir("R")
devtools::check()
devtools::check()
devtools::check()
devtools::build()
install.packages(file.path("C:/Users/Natalie/Desktop/Fall 2019/PHC6068/Final Project","lmBootCompare_0.0.0.9000.tar.gz"),repos=NULL,type="source")
library(lmBootCompare)
boots <- bootstrapSamples(lm1, "svi ~ age", prostate, 1000)
bootstrapSummary(boots, lm1)
bootstrapConfInt(lm1, boots, 0.95)
coefficientPlots(lm1, boots)
devtools::check()
devtools::check()
devtools::build()
install.packages(file.path("C:/Users/Natalie/Desktop/Fall 2019/PHC6068/Final Project","lmBootCompare_0.0.0.9000.tar.gz"),repos=NULL,type="source")
lm1 <- lm(svi ~ age*gleason, prostate)
library(lmBootCompare)
boots <- bootstrapSamples(lm1, "svi ~ age*gleason", prostate, 1000)
bootstrapSummary(boots, lm1)
bootstrapConfInt(lm1, boots, 0.95)
coefficientPlots(lm1, boots)
library(lmBootCompare)
data("pipeline")
head(pipeline)
lMod <- lm(Lab~Field,data=pipeline)
sumary(lMod)
plot(lMod)
plot(lMod)[1]
shapiro.test(lMod$residuals)
?plot.lm
plot(lMod, c(1,2))
View(pipeline)
bootsamps <- bootstrapSamples( lmodObs = lMod, formula = "Lab ~ Field", data = pipeline )
bootsamps <- bootstrapSamples( lmodObs = lMod, formula = "Lab ~ Field", data = pipeline, B = 1000 )
typeof(pipeline)
class(pipeline$Field)
typeof(pipeline$Field)
typeof(prostate)
typeof(prostate$svi)
typeof(prostate$age)
typeof(prostate$gleason)
bootsamps <- bootstrapSamples( lmodObs = lMod, formula = "Lab ~ Field", data = pipeline, B = 1000 )
View(boots)
warnings()
typeof(pipeline$Lab)
class(pipeline$Lab)
View(pipeline)
bC <- bootCases(formula = "Lab ~ Field", data = pipeline, B = 1000)
warnings()
bR <- bootResids(formula = "Lab ~ Field", data = pipeline, B = 1000, lmodObs = lMod)
bW_m2 <- bootWild(formula = "Lab ~ Field", data = pipeline, B = 1000, lmodObs = lMod, multiplier = "Mammen2")
bW_mc <- bootWild(formula = "Lab ~ Field", data = pipeline, B = 1000, lmodObs = lMod, multiplier = "MammenC")
bw_r <- bootWild(formula = "Lab ~ Field", data = pipeline, B = 1000, lmodObs = lMod, multiplier = "Rademacher")
bw_n <- bootWild(formula = "Lab ~ Field", data = pipeline, B = 1000, lmodObs = lMod, multiplier = "norm")
View(bw_r)
casesSamps <- sampler(x = pipeline, B = 1000)
bootReplicates <- apply(casesSamps, 3, function(x) stats::lm(stats::as.formula(formula), data = data.frame(x))$coefficients)
bC <- bootCases(formula = "Lab ~ Field", data = pipeline, B = 1000)
bR <- bootResids(formula = "Lab ~ Field", data = pipeline, B = 1000, lmodObs = lMod)
View(bR)
dim(casesSamps)
View(pipeline)
pipeline <- pipeline[,-c("Batch")]
pipeline <- pipeline[,-3]
View(pipeline)
bC <- bootCases(formula = "Lab ~ Field", data = pipeline, B = 1000)
casesSamps <- sampler(x = pipeline, B = 1000)
bootReplicates <- apply(casesSamps, 3, function(x) stats::lm(stats::as.formula(formula), data = data.frame(x))$coefficients)
casesSamps[1]
casesSamps[[1]]
casesSamps
casesSamps[,,1]
test <- casesSamps[,,1]
View(test)
formula = "Lab ~ Field"
lm(stats::as.formula(formula), data = data.frame(test))$coefficients
dim(casesSamps)
bootReplicates <- apply(casesSamps, 3, function(x) stats::lm(stats::as.formula(formula), data = data.frame(x))$coefficients)
View(bootReplicates)
return(data.frame(t(bootReplicates), check.names = F))
data.frame(t(bootReplicates), check.names = F)
data.frame(t(bootReplicates), check.names = F)
bC <- bootCases(formula = "Lab ~ Field", data = pipeline, B = 1000)
View(bC)
bootsamps <- bootstrapSamples( lmodObs = lMod, formula = "Lab ~ Field", data = pipeline, B = 1000 )
library(faraway)
data("pipeline")
head(pipeline)
pipeline <- pipeline[,-3]
lMod <- lm(Lab~Field,data=pipeline)
bootsamps <- bootstrapSamples( lmodObs = lMod, formula = "Lab ~ Field", data = pipeline, B = 1000 )
rm(bootsamps)
bootsamps <- bootstrapSamples( lmodObs = lMod, formula = "Lab ~ Field", data = pipeline, B = 1000 )
bootsamps <- bootstrapSamples( lmodObs = lMod, formula = "Lab ~ Field", data = pipeline, B = 1000 )
bootstrapSummary(bootsamps, lMod)
coefficientPlots(lMod, bootsamps)
bootstrapConfInt(lMod, bootsamp, 0.95)
bootstrapConfInt(lMod, bootsamps, 0.95)
git config --global user.name "Natalie DelRocco"
getwd()
R.Home()
R.home()
path.expand("~")
install.packages("installr")
library(installr)
